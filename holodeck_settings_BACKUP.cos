*snap "test_agent2" 242 90318 128 128 100
*loft "test_agent"

*check the default camera page in the norn life applet to see how long you should wait to verify the photo was taken successfully.

*wait 100

*snap "test_agent5" 242 90318 128 128 100


*Kill any existing holodeck settings screens.
enum 1 1 64735
	kill targ
next

*MAKE THE HOLODECK OBJECT SETTINGS PANEL!!

new: comp 1 1 64735 "holodeck_settings" 0 0 5000

**OBJECT TYPE SCREEN

pat: butt 1001 "holodeck_objecttypes" 0 0 10 51 1 [] 1001 0
*Food 10,51

pat: butt 1002 "holodeck_objecttypes" 2 0 10 84 1 [] 1002 0
*Seed 10,84

pat: butt 1003 "holodeck_objecttypes" 4 0 10 117 1 [] 1003 0
*Fruit 10, 117

pat: butt 1004 "holodeck_objecttypes" 6 0 10 150 1 [] 1004 0
*Toy: 10, 150


**TOY TEMPLATE SCREEN


pat: butt 2001 "holodeck_toytemplates" 0 0 278 51 1 [] 2001 0
*Apply Random Velocity 278, 51

pat: butt 2002 "holodeck_toytemplates" 2 0 278 84 1 [] 2002 0
*Spinning Top: 278, 84

pat: butt 2003 "holodeck_toytemplates" 4 0 278 117 1 [] 2003 0
*Basic Robot: 278, 117

pat: butt 2004 "holodeck_toytemplates" 6 0 278 150 1 [] 2004 0
*Rocket: 278, 150


**COLLISION SOUND SCREEN

pat: butt 3001 "holodeck_sounds" 2 0 11 253 1 [] 3001 0
*drp6: 11, 253

pat: butt 3002 "holodeck_sounds" 4 0 11 282 1 [] 3002 0
*dr10: 11, 282

pat: butt 3003 "holodeck_sounds" 6 0 112 253 1 [] 3003 0
*boi2: 112, 253

pat: butt 3004 "holodeck_sounds" 8 0 112 282 1 [] 3004 0
*boi3: 112, 282


**SHARED BUTTONS

pat: text 9000 "holodeck_settings" 3 283 381 1 9000 "whiteontransparentchars"
* sprite name: 283, 381

pat: butt 9001 "holodeck_settings" 1 0 54 349 1 [] 9001 0
*Make it real:  54, 349


mvto 343 90201

cmrt 0


part 1001
pose 1
part 1002
pose 0
part 1003
pose 0
part 1004
pose 0

sets ov00 "Food"

part 2001
pose 1
part 2002
pose 0
part 2003
pose 0
part 2004
pose 0

sets ov01 "Apply Random Velocity"

part 3001
pose 0
part 3002
pose 0
part 3003
pose 1
part 3004
pose 0

sets ov02 "boi2"

snde ov02


**OBJECT TYPE SCREEN SCRIPTS - SETS OV00, aka which type of object are we making?

*Food

scrp 1 1 64735 1001

	part 1001
	pose 1
	part 1002
	pose 0
	part 1003
	pose 0
	part 1004
	pose 0

	sets ov00 "Food"

endm


*Seed

scrp 1 1 64735 1002

	part 1001
	pose 0
	part 1002
	pose 1
	part 1003
	pose 0
	part 1004
	pose 0

	sets ov00 "Seed"

endm


*Fruit

scrp 1 1 64735 1003

	part 1001
	pose 0
	part 1002
	pose 0
	part 1003
	pose 1
	part 1004
	pose 0

	sets ov00 "Fruit"

endm


*Toy

scrp 1 1 64735 1004

	part 1001
	pose 0
	part 1002
	pose 0
	part 1003
	pose 0
	part 1004
	pose 1

	sets ov00 "Toy"

endm



**TOY TEMPLATE SCREEN SCRIPTS - SETS OV01, aka which template are we using?

*Apply Random Velocity

scrp 1 1 64735 2001

	part 2001
	pose 1
	part 2002
	pose 0
	part 2003
	pose 0
	part 2004
	pose 0

	sets ov01 "Apply Random Velocity"

endm


*Spinning Top

scrp 1 1 64735 2002

	part 2001
	pose 0
	part 2002
	pose 1
	part 2003
	pose 0
	part 2004
	pose 0

	sets ov01 "Spinning Top"

endm


*Basic Robot

scrp 1 1 64735 2003

	part 2001
	pose 0
	part 2002
	pose 0
	part 2003
	pose 1
	part 2004
	pose 0

	sets ov01 "Basic Robot"

endm


*Rocket

scrp 1 1 64735 2004

	part 2001
	pose 0
	part 2002
	pose 0
	part 2003
	pose 0
	part 2004
	pose 1

	sets ov01 "Rocket"

endm



**COLLISION SOUND SCREEN SCRIPTS - SETS OV02, aka which sound do we make when we hit a wall?

*drp6

scrp 1 1 64735 3001

	part 3001
	pose 1
	part 3002
	pose 0
	part 3003
	pose 0
	part 3004
	pose 0

	sets ov02 "drp6"

	snde ov02

endm


*dr10

scrp 1 1 64735 3002

	part 3001
	pose 0
	part 3002
	pose 1
	part 3003
	pose 0
	part 3004
	pose 0

	sets ov02 "dr10"

	snde ov02

endm


*boi2

scrp 1 1 64735 3003

	part 3001
	pose 0
	part 3002
	pose 0
	part 3003
	pose 1
	part 3004
	pose 0

	sets ov02 "boi2"

	snde ov02

endm


*boi3

scrp 1 1 64735 3004

	part 3001
	pose 0
	part 3002
	pose 0
	part 3003
	pose 0
	part 3004
	pose 1

	sets ov02 "boi3"

	snde ov02

endm


**SHARED BUTTON SCRIPTS - these don't control a specific OV.

*Sprite Name Enter Press

scrp 1 1 64735 9000

*just unset focus when enter is pressed
	targ null
	fcus

endm


*Pushed the button that makes it real!!!!!!!

scrp 1 1 64735 9001

	part 9001
	anim [1 1 1 0]

	part 9000
	sets va50 ptxt

	snde "poyy"

*target the drawing panel
*	rtar 1 1 64731

*target the mini pixel image
	rtar 1 1 64743

*find the center of the drawing panel
*	setv va98 posx
*	setv va99 posy

*find the center of the mini pixel image
	setv va98 posx
	setv va99 posy

*set to the width and height of the drawing panel
*	setv va96 128
*	setv va97 128

*set to the width and height of the mini pixel image
	setv va96 36
	setv va97 36

*if there's already an image with the specified name, throw an error.
	doif snax va50 = 1
		snde "no__"
	else
*unfortunately the scale parameter at the end doesnt seem to do anything
		snap va50 va98 va99 va96 va97 100

		targ ownr

*grab necessary params for the new object
		sets va00 ov00
		sets va01 ov01
		sets va02 ov02


		new: simp 1 1 64730 va50 0 0 5000


*set necessary params you just grabbed
		sets ov00 va00
		sets ov01 va01
		sets ov02 va02


*TODO: test code to classify the new object as a toy



*	0 - <Invisible to Creatures>
*	1 - Hand
*	2 - Door
*	3 - Seed
*	4 - Plant
*	5 - Weed
*	6 - Leaf
*	7 - Flower
*	8 - Fruit
*	9 - Manky
*	10 - Detritus
*	11 - Food
*	12 - Button
*	13 - Bug
*	14 - Pest
*	15 - Critter
*	16 - Beast
*	17 - Nest
*	18 - Animal egg
*	19 - Weather
*	20 - Bad
*	21 - Toy
*	22 - Incubator
*	23 - Dispenser
*	24 - Tool
*	25 - Potion
*	26 - Elevator
*	27 - Teleporter
*	28 - Machinery
*	29 - Creature egg
*	30 - Norn home
*	31 - Grendel home
*	32 - Ettin home
*	33 - Gadget
*	34 - Portal
*	35 - Vehicle
*	36 - Norn
*	37 - Grendel
*	38 - Ettin
*	39 - Something (Geat)

*toy
		cato 21
*relevant toy bhvr according to Creatures Development Standards	
		bhvr 43



*ACTIVATE 1:

*PreDefined Action (not remapped in script 9000)
		sets OV10 "Apply Random Velocity"

*Anim String
		sets OV11 "98765432100"

*Action Params
		setv OV12 25
		setv OV13 25
		setv OV14 5
		setv OV15 20

*Chems to stim and amounts to stim them (8 characters)
		sets OV16 "AAAAAAAA"

*Sound to play
		sets OV17 "sax1"


*7 variables per function
*10 functions






		mvsf 240 90322
	endi



endm

*file jdel to delete photo later?




* CUSTOM OBJECT CREATION SCRIPT
* Fill in all those variables!

scrp 1 1 64730 10

* Carryable + Mouseable + Activateable + Suffer Collisions + Suffer Physics
	attr 199

*Activate 1 + 2
*bhvr 3

*	perm 100
*	accg 3
*	fric 70
*	aero 1
*	elas 10


	aero 10
	perm 60
	accg 2
	elas 90
	fric 90



endm



scrp 1 1 64730 1


	sets ov01 "Apply Random Velocity"

*set up variables
*the first parameter _P1_ is the script number, in this case Activate 1
	call 9000 1 0

*	sets ov01 "Anim"

**********************************
*********** PLAY ANIM ************
**********************************

	doif ov01 = "Anim"


		call 5000 from 0


***************************************************
************* APPLY RANDOM VELOCITY ***************
***************************************************

	elif ov01 = "Apply Random Velocity"


		call 5001 from 0

**********************************
********* SPINNING TOP ***********
**********************************

	elif ov01 = "Spinning Top"

		call 5002 from 0

	endi
endm






* HAPPY BALL ACTIVATE 2 SCRIPT

scrp 1 1 64730 2

*Stimulate the creature with "Played with toy"
	stim writ from 97 1

	inst

	setv va00 posl
	setv va01 posr
	addv va00 va01
	divv va00 2
	targ from
	setv va01 posl
	targ ownr
	doif va01 lt va00
		setv va02 rand 15 25
	else
		setv va02 rand -25 -15
	endi
	velo va02 rand 20 70
endm

* HAPPY BALL HIT SCRIPT

scrp 1 1 64730 3

*Stimulate the creature with "Played with toy"
	stim writ from 97 1

*(randoms between activate 1 and activate 2)
	mesg writ ownr rand 0 1
endm


* HAPPY BALL COLLISION SCRIPT

scrp 1 1 64730 6
	inst

*Urge all creatures who can see OWNR to perform an action on OWNR.
	urge sign 0.5 -1 0.0

	setv va00 vely
	doif va00 lt 0
		negv va00
	endi
	doif va00 gt 1
*play stored collision sound
		snde ov02
	endi

	setv va00 _p1_
	setv va01 _p2_
	doif va00 lt 0
		negv va00
	endi
	doif va01 lt 0
		negv va01
	endi
	doif va00 lt 3 and va01 lt 3
	endi
endm












*****************************
****** PLAY ANIMATION *******
*****************************

scrp 1 1 64730 5000


*start counting reps at 1 so the string index isn't out of bounds.
*	setv va00 1


*va15 = get AnimString string length.
	setv va15 strl ov88

*va15 = the final character of the string, as a char.
	setv va15 char ov88 va15

*debug say amount of times you're going to repeat the anim.
	targ norn
	sezz vtos va15
	targ ownr

*run this loop as many times as the NumLoops character.
	reps va15

*run this loop as many times as the length of the anim string.
		setv va10 strl ov88
*-1 because of the NumLoops character.
		subv va10 1

		reps va10


*"animframe"
			sets va01 gall

*remove the last character of the Gallery (sprite file) Name
			setv va02 strl va01
			subv va02 1
			sets va03 subs va01 1 va02

			targ norn
*			sezz va01
			targ ownr



*add 1 to the iteration number before using it as a string index. because string indexes start at 1 not 0.
			setv va77 va00
			addv va77 1

*put the character of the anim string we are currently looking at it in VA05
			sets va05 subs ov88 va77 1


*			setv va05 stoi va03

*"animframeX"
			adds va03 va05

			gall va03 0

*add 1 to Iteration Variable
			addv va00 1


			wait 5

		repe

*reset Iteration Variable in case you have to play again.
		setv va00 0


	repe

endm





*Stimulate the creature with "Played with toy"
*	stim writ _p1_ 97 1



***************************************************
************* APPLY RANDOM VELOCITY ***************
***************************************************

scrp 1 1 64730 5001

*inst

*Random number between Minimum X Velocity and Maximum X Velocity
	setv va00 rand ov90 ov91
*Random number between Minimum Y Velocity and Maximum Y Velocity
	setv va01 rand ov92 ov93

*set velocity to the randomized numbers
	velo va00 va01

endm











***************************
****** SPINNING TOP *******
***************************

scrp 1 1 64730 5002

*Stimulate the creature with "Played with toy"
	stim writ _p1_ 97 1

	lock

*this variable is used to track if the spinning top was picked up while spinning.
*pretty sure it sets itself to 0 whenever this script starts but just incase...
	setv va99 0

	setv ov00 0

*temporarily make it unactivatable
	clac -1
	sndc "mtop"
*		anim [1 2 3 4 5 6 7 8 9 255]
	setv va00 rand 35 50

	reps 20

		doif va99 = 0
			setv va01 rand -10 10

*don't try and push yourself up if you're already moving up or down rapidly!
*doif vely < 5 and vely > -5
*setv vely -3
*endi

*		addv instead of setv prevents it from floating!
			addv vely -3

			setv velx va01

			wait 1

			doif carr = pntr
*reset pose, stop the sound, make it activatable again
				pose 0
*				stpc
				fade
				clac 0
*let the script know it doesnt have to do the rest of the stuff
				setv va99 1
			endi
		endi

	repe


*having lock here means that picking it up overrides the anim most of the time, but doesn't break the end of the spin anim (removing lock entirely DOES break it)
*lock


	reps 8
		doif va99 = 0
			addv va02 1
*				pose va02

			doif va02 eq 9

				setv va02 0

			endi

			setv va01 rand -5 5
			setv velx va01
			wait 1

			doif carr = pntr
*reset pose, stop the sound, make it activatable again
				pose 0
*			stpc
				fade
				clac 0
*let the script know it doesnt have to do the rest of the stuff
				setv va99 1
			endi
		endi
	repe

	doif carr = null

*			anim [10 11 12]
		over
*	stpc
		fade
		setv velx 0
		inst
		setv vely -3
*make it activatable again
		clac 0
		slow
	endi

*reset the variable so it knows the movement wasn't cancelled by being picked up
	setv va99 0
	unlk

endm














*
*
*new: simp 1 1 64730 "test_agent5" 0 0 5000
*
*
** Carryable + Mouseable + Activateable + Suffer Collisions + Suffer Physics
*attr 199
*
**Activate 1 + 2
**bhvr 3
*
*perm 100
*accg 3
*fric 70
*aero 1
*elas 10
*
*
*mvsf 698 90610
*
*cmrt 0
*
*
*
*scrp 1 1 64730 1
*
*

*endm






*copy of this up above, delete this later

**PreDefined Action (not remapped in script 9000)
*sets OV10 "Apply Random Velocity"
*
**Action Params
*setv OV11 25
*setv OV12 25
*setv OV13 5
*setv OV14 20
*
*
**Chems to stim and amounts to stim them (8 characters)
*sets OV15 "AAAAAAAA"
*
**Sound to play
*sets OV16 "sax1"
*
**Anim String
*sets OV17 "98765432100"
*
**7 variables per function
**10 functions


***********************************************
*** SET UP VARIABLES FOR PREDEFINED ACTIONS ***
******************** (9000) *******************
***********************************************

* OV00 - PreDefined Action

* Moves per Script Number OVs to these static OVs so that any Script Number can call any PreDefined Action and get the correct OVs for that Script Number.

* OV01 - Action Param 1
* OV02 - Action Param 2
* OV03 - Action Param 3
* OV04 - Action Param 4

* OV05 - 4 Chemicals To Stim and their Amounts to stim (represented as a string of 8 characters) (C1 A1 C2 A2 C3 A3 C4 A4)

* OV06 - sound to make
* _OV06 2nd from Last char - sound play mode (not implemented)
* __OV06 Last char - sound play delay (only SNDQ will listen for it)

* OV07 - Anim String (represented as a string of X characters) (F1 F2 F3 F4 etc ...)

**********************************************

scrp 1 1 64730 9000

**************
* ACTIVATE 1 *
**************
	doif _p1_ = 1

*PreDefined Action
		sets OV00 OV10

*PreDefined Action Params
		setv OV01 OV11
		setv OV02 OV12
		setv OV03 OV13
		setv OV04 OV14

*4 Chemicals To Stim and their Amounts to stim (represented as a string of 8 characters) (C1 A1 C2 A2 C3 A3 C4 A4)
		sets OV05 OV15

*Make this Sound (can be null)
		sets OV06 OV16

*Anim String (represented as a string of N characters) (F1 F2 F3 F4 etc ...)
		sets OV07 OV17


**************
* ACTIVATE 2 * (NOT IMPLEMENTED BUT JUST COPY THE FORMAT FROM THE ONE ABOVE)
**************
	elif _p1_ = 2

*PreDefined Action Params
*setv OV01 OV12
*setv OV02 OV13
*setv OV03 OV14
*setv OV04 OV15

	endi

endm









***********************************************
************ PLAY ANIMATION STRING ************
******************** (9001) *******************
***********************************************

* OV07 - Anim String (represented as a string of X characters) (F1 F2 F3 F4 etc ...)
* _OV07 Last char - (int256) How many times to loop the anim
* __OV07 Last char - (int256) Delay between frames

**********************************************

scrp 1 1 64730 9001

*start counting reps at 1 so the string index isn't out of bounds.
*	setv va00 1


*va15 = get AnimString string length.
	setv va15 strl OV07

*va15 = the final character of the string, as a char.
	setv va15 char OV07 va15

*debug say amount of times you're going to repeat the anim.
	targ norn
	sezz vtos va15
	targ ownr

*run this loop as many times as the NumLoops character.
	reps va15

*run this loop as many times as the length of the anim string.
		setv va10 strl OV07
*-1 because of the NumLoops character.
		subv va10 1

		reps va10


*"animframe"
			sets va01 gall

*remove the last character of the Gallery (sprite file) Name
			setv va02 strl va01
			subv va02 1
			sets va03 subs va01 1 va02

			targ norn
*			sezz va01
			targ ownr



*add 1 to the iteration number before using it as a string index. because string indexes start at 1 not 0.
			setv va77 va00
			addv va77 1

*put the character of the anim string we are currently looking at it in VA05
			sets va05 subs OV07 va77 1


*			setv va05 stoi va03

*"animframeX"
			adds va03 va05

			gall va03 0

*add 1 to Iteration Variable
			addv va00 1


			wait 5

		repe

*reset Iteration Variable in case you have to play again.
		setv va00 0


	repe

endm







***********************************************
***************** PLAY SOUND! *****************
******************** (9002) *******************
***********************************************

* OV06 - SoundToPlay
* _OV06 Last char - sound play mode (not implemented)
* __OV06 Last char - 

**********************************************

scrp 1 1 64730 9002

*todo: add support for sndc and sndl
	snde OV06

endm






***********************************************
************** INJECT CHEMICALS ***************
******************** (9003) *******************
***********************************************

* OV05 - 4 Chemicals To Stim (represented as a string of 4 characters) (C1 C2 C3 C4)

* OV06 - Amount to stim C1
* OV07 - Amount to stim C2
* OV08 - Amount to stim C3
* OV09 - Amount to stim C4

* OV05 - 4 Chemicals To Stim and their Amounts to stim (represented as a string of 8 characters) (C1 A1 C2 A2 C3 A3 C4 A4)

***********************************************

scrp 1 1 64730 9003


*Convert the string into the 4 chemical numbers.
	setv va00 char ov05 1
	setv va01 char ov05 3
	setv va02 char ov05 5
	setv va03 char ov05 7


*va01 is the loop number/iteration (starting at 1 because of string indexes)
	setv va00 1

*Loop for every character in the chemicals string divided by 2 (8/2=4)
	reps 4

*va01 is the loop number/iteration + 1
		setv va01 va00
		addv va01 1

*VA02 is the CHEMICAL NUMBER
		setv va02 char ov05 va00

*VA03 is the CHEMICAL AMOUNT
		setv va03 char ov05 va01

*VA03 is stored as a single byte, so needs some conversion:
*IMPORTANT: When dividing by a number and needing the result to be a float, need .0 after the number!!
		subv va03 128.0
		divv va03 128.0

*Inject the CHEMICAL (VA02) with the AMOUNT (VA03)
		chem VA02 VA03

*increase loop number
		addv va00 1

	repe

	sets va99 "chem: "
	adds va99 vtos VA02
	adds va99 " amount: "
	adds va99 vtos VA03

	targ norn
	sezz va99


endm