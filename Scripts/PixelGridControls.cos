enum 1 1 64736
	kill targ
next



new: comp 1 1 64736 "holodeck_frame" 0 3 5000


*MAKE THE PALETTE PANEL!! (can delete this honestly)

*pat: dull 3 "holodeck_frame" 0 0 0 1


*BLACK
pat: butt 1001 "holodeck_frame" 4 0 2 2 1 [] 1001 0
*LIGHT BLUE
pat: butt 1002 "holodeck_frame" 4 0 18 2 1 [] 1002 0

*DARK GREY
pat: butt 1003 "holodeck_frame" 4 0 2 18 1 [] 1003 0
*BLUE
pat: butt 1004 "holodeck_frame" 4 0 18 18 1 [] 1004 0

*LIGHT GREY
pat: butt 1005 "holodeck_frame" 4 0 2 34 1 [] 1005 0
*MAUVE
pat: butt 1006 "holodeck_frame" 4 0 18 34 1 [] 1006 0

*LIGHTEST GREY
pat: butt 1007 "holodeck_frame" 4 0 2 50 1 [] 1007 0
*MAGENTA
pat: butt 1008 "holodeck_frame" 4 0 18 50 1 [] 1008 0

*DULL ORANGE
pat: butt 1009 "holodeck_frame" 4 0 2 66 1 [] 1009 0
*SCARLET
pat: butt 1010 "holodeck_frame" 4 0 18 66 1 [] 1010 0

*BURGUNDY
pat: butt 1011 "holodeck_frame" 4 0 2 82 1 [] 1011 0
*BRIGHT ORANGE
pat: butt 1012 "holodeck_frame" 4 0 18 82 1 [] 1012 0

*DARK GREEN
pat: butt 1013 "holodeck_frame" 4 0 2 98 1 [] 1013 0
*YELLOW
pat: butt 1014 "holodeck_frame" 4 0 18 98 1 [] 1014 0

*LIME GREEN
pat: butt 1015 "holodeck_frame" 4 0 2 114 1 [] 1015 0
*WHITE
pat: butt 1016 "holodeck_frame" 4 0 18 114 1 [] 1016 0




*CLEAR BUTTON
pat: butt 2001 "holodeck_frame" 1 0 0 130 1 [] 2001 0

*CLEAR ALL BUTTON
pat: butt 2011 "holodeck_frame" 36 0 120 170 1 [] 2011 0

*COPY BUTTON
pat: butt 2002 "holodeck_frame" 6 0 0 150 1 [] 2002 0

*CUT BUTTON
pat: butt 2003 "holodeck_frame" 8 0 0 170 1 [] 2003 0

*PASTE BUTTON
pat: butt 2004 "holodeck_frame" 10 0 40 130 1 [] 2004 0

*FLIP X BUTTON
pat: butt 2005 "holodeck_frame" 12 0 40 150 1 [] 2005 0

*FLIP Y BUTTON
pat: butt 2006 "holodeck_frame" 14 0 40 170 1 [] 2006 0

*ROTATE 90 CLOCKWISE BUTTON
pat: butt 2007 "holodeck_frame" 16 0 80 130 1 [] 2007 0

*ROTATE 90 COUNTER-CLOCKWISE BUTTON
pat: butt 2008 "holodeck_frame" 18 0 80 150 1 [] 2008 0

*ROTATE 180 DEGREES BUTTON
pat: butt 2009 "holodeck_frame" 20 0 80 170 1 [] 2009 0

*INVERT COLOURS BUTTON
pat: butt 2010 "holodeck_frame" 22 0 120 190 1 [] 2010 0




****************
* TOOL PANEL!! *
****************

pat: dull 3000 "holodeck_frame" 24 50 0 2

*BRUSH TOOL
pat: butt 3001 "holodeck_frame" 25 0 63 13 3 [] 3001 0

*FILL TOOL
pat: butt 3002 "holodeck_frame" 27 0 103 13 3 [] 3002 0

*ERASER TOOL
pat: butt 3003 "holodeck_frame" 29 0 63 53 3 [] 3003 0

*PICKER TOOL
pat: butt 3004 "holodeck_frame" 31 0 103 53 3 [] 3004 0




**********************
* BRUSH SIZE PANEL!! *
**********************

pat: dull 4000 "holodeck_frame" 33 -20 200 2


pat: butt 4001 "holodeck_frame" 34 0 -20 200 3 [] 4001 0
pat: butt 4002 "holodeck_frame" 34 0 0 200 3 [] 4002 0
pat: butt 4003 "holodeck_frame" 34 0 20 200 3 [] 4003 0
pat: butt 4004 "holodeck_frame" 34 0 40 200 3 [] 4004 0
pat: butt 4005 "holodeck_frame" 34 0 60 200 3 [] 4005 0
pat: butt 4006 "holodeck_frame" 34 0 80 200 3 [] 4006 0
pat: butt 4007 "holodeck_frame" 34 0 -20 220 3 [] 4007 0
pat: butt 4008 "holodeck_frame" 34 0 0 220 3 [] 4008 0
pat: butt 4009 "holodeck_frame" 34 0 20 220 3 [] 4009 0
pat: butt 4010 "holodeck_frame" 34 0 40 220 3 [] 4010 0
pat: butt 4011 "holodeck_frame" 34 0 60 220 3 [] 4011 0
pat: butt 4012 "holodeck_frame" 34 0 80 220 3 [] 4012 0




***************************
* SAVE/LOAD IMAGE BUTTONS *
***************************

*SAVE IMAGE
pat: butt 5001 "holodeck_frame" 38 0 0 420 3 [] 5001 0

*LOAD IMAGE (not implemented)
pat: butt 5002 "holodeck_frame" 40 0 40 420 3 [] 5002 0

mvto 101 90227



*BLACK
scrp 1 1 64736 1001

	rtar 1 1 64742

	setv ov01 0

endm

*LIGHT BLUE
scrp 1 1 64736 1002

	rtar 1 1 64742

	setv ov01 1

endm

*DARK GREY
scrp 1 1 64736 1003

	rtar 1 1 64742

	setv ov01 2

endm

*BLUE

scrp 1 1 64736 1004

	rtar 1 1 64742

	setv ov01 3

endm

*LIGHT GREY
scrp 1 1 64736 1005

	rtar 1 1 64742

	setv ov01 4

endm

*MAUVE
scrp 1 1 64736 1006

	rtar 1 1 64742

	setv ov01 5

endm

*LIGHTEST GREY
scrp 1 1 64736 1007

	rtar 1 1 64742

	setv ov01 6

endm

*MAGENTA
scrp 1 1 64736 1008

	rtar 1 1 64742

	setv ov01 7

endm

*DULL ORANGE
scrp 1 1 64736 1009

	rtar 1 1 64742

	setv ov01 8

endm

*SCARLET
scrp 1 1 64736 1010

	rtar 1 1 64742

	setv ov01 9

endm

*BURGUNDY
scrp 1 1 64736 1011

	rtar 1 1 64742

	setv ov01 10

endm

*BRIGHT ORANGE
scrp 1 1 64736 1012

	rtar 1 1 64742

	setv ov01 11

endm

*DARK GREEN
scrp 1 1 64736 1013

	rtar 1 1 64742

	setv ov01 12

endm

*YELLOW
scrp 1 1 64736 1014

	rtar 1 1 64742

	setv ov01 13

endm

*LIME GREEN
scrp 1 1 64736 1015

	rtar 1 1 64742

	setv ov01 14

endm

*WHITE
scrp 1 1 64736 1016

	rtar 1 1 64742

	setv ov01 15

endm








**************
* TOOL MODES *
**************

*BRUSH TOOL
scrp 1 1 64736 3001

	setv game "Holodeck_CursorMode" 1

*set this button to ON and all other buttons to OFF
	part 3001
	pose 1
	part 3002
	pose 0
	part 3003
	pose 0
	part 3004
	pose 0

endm

*FILL TOOL
scrp 1 1 64736 3002

	setv game "Holodeck_CursorMode" 2

*set this button to ON and all other buttons to OFF
	part 3001
	pose 0
	part 3002
	pose 1
	part 3003
	pose 0
	part 3004
	pose 0
endm

*ERASER TOOL
scrp 1 1 64736 3003

	setv game "Holodeck_CursorMode" 3

*set this button to ON and all other buttons to OFF
	part 3001
	pose 0
	part 3002
	pose 0
	part 3003
	pose 1
	part 3004
	pose 0

endm

*PICKER TOOL
scrp 1 1 64736 3004

	setv game "Holodeck_CursorMode" 4

*set this button to ON and all other buttons to OFF
	part 3001
	pose 0
	part 3002
	pose 0
	part 3003
	pose 0
	part 3004
	pose 1

endm









***************
* BRUSH SIZES *
***************

*note: It's recommended you use a square font such as "Inversions" when editing the brushes.
*It will be much easier to see the shapes.

*Brush Width and Height are determined by the position of the first comma.

*It will crash if you make a brush that isn't the same Height as Width!!!

*the center of the brush is automatically calculated as Brush Width / 2 (rounded down) - 1 * PixelWidth (8)


*SCRP 4000 is a script to hide all brush size buttons except for _P1_ which is called in every 400X script except 4000 itself.

scrp 1 1 64736 4000

*	inst

	setv va00 4001

	reps 12

		part va00
		pose 0

		addv va00 1

	repe

	part _p1_
	pose 1

endm




scrp 1 1 64736 4001

inst

	sets game "Holodeck_BrushSize" "X,"

	call 4000 4001 0

endm

scrp 1 1 64736 4002

inst

	sets game "Holodeck_BrushSize" "XX,"
	adds game "Holodeck_BrushSize" "XX,"

	call 4000 4002 0

endm

scrp 1 1 64736 4003

inst

	sets game "Holodeck_BrushSize" " X ,"
	adds game "Holodeck_BrushSize" "XXX,"
	adds game "Holodeck_BrushSize" " X ,"

	call 4000 4003 0

endm

scrp 1 1 64736 4004

inst

	sets game "Holodeck_BrushSize" "XXX,"
	adds game "Holodeck_BrushSize" "XXX,"
	adds game "Holodeck_BrushSize" "XXX,"

	call 4000 4004 0

endm

scrp 1 1 64736 4005

inst

	sets game "Holodeck_BrushSize" " XX ,"
	adds game "Holodeck_BrushSize" "XXXX,"
	adds game "Holodeck_BrushSize" "XXXX,"
	adds game "Holodeck_BrushSize" " XX ,"

	call 4000 4005 0

endm

scrp 1 1 64736 4006

inst

	sets game "Holodeck_BrushSize" " XXX ,"
	adds game "Holodeck_BrushSize" "XXXXX,"
	adds game "Holodeck_BrushSize" "XXXXX,"
	adds game "Holodeck_BrushSize" "XXXXX,"
	adds game "Holodeck_BrushSize" " XXX ,"

	call 4000 4006 0

endm

scrp 1 1 64736 4007

inst

	sets game "Holodeck_BrushSize" " XXXX ,"
	adds game "Holodeck_BrushSize" "XXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXX,"
	adds game "Holodeck_BrushSize" " XXXX ,"

	call 4000 4007 0

endm

scrp 1 1 64736 4008

inst

	sets game "Holodeck_BrushSize" "  XXX  ,"
	adds game "Holodeck_BrushSize" " XXXXX ,"
	adds game "Holodeck_BrushSize" "XXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXX,"
	adds game "Holodeck_BrushSize" " XXXXX ,"
	adds game "Holodeck_BrushSize" "  XXX  ,"

	call 4000 4008 0

endm

scrp 1 1 64736 4009

inst

	sets game "Holodeck_BrushSize" "  XXXX  ,"
	adds game "Holodeck_BrushSize" " XXXXXX ,"
	adds game "Holodeck_BrushSize" "XXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXX,"
	adds game "Holodeck_BrushSize" " XXXXXX ,"
	adds game "Holodeck_BrushSize" "  XXXX  ,"

	call 4000 4009 0

endm

scrp 1 1 64736 4010

inst

	sets game "Holodeck_BrushSize" "  XXXXX  ,"
	adds game "Holodeck_BrushSize" " XXXXXXX ,"
	adds game "Holodeck_BrushSize" "XXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXX,"
	adds game "Holodeck_BrushSize" " XXXXXXX ,"
	adds game "Holodeck_BrushSize" "  XXXXX  ,"

	call 4000 4010 0

endm

scrp 1 1 64736 4011

inst

	sets game "Holodeck_BrushSize" "   XXXX   ,"
	adds game "Holodeck_BrushSize" " XXXXXXXX ,"
	adds game "Holodeck_BrushSize" " XXXXXXXX ,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXX,"
	adds game "Holodeck_BrushSize" " XXXXXXXX ,"
	adds game "Holodeck_BrushSize" " XXXXXXXX ,"
	adds game "Holodeck_BrushSize" "   XXXX   ,"

	call 4000 4011 0

endm

scrp 1 1 64736 4012

inst

	sets game "Holodeck_BrushSize" "     XXXXX     ,"
	adds game "Holodeck_BrushSize" "   XXXXXXXXX   ,"
	adds game "Holodeck_BrushSize" "  XXXXXXXXXXX  ,"
	adds game "Holodeck_BrushSize" " XXXXXXXXXXXXX ,"
	adds game "Holodeck_BrushSize" " XXXXXXXXXXXXX ,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXXXXXXX,"
	adds game "Holodeck_BrushSize" "XXXXXXXXXXXXXXX,"
	adds game "Holodeck_BrushSize" " XXXXXXXXXXXXX ,"
	adds game "Holodeck_BrushSize" " XXXXXXXXXXXXX ,"
	adds game "Holodeck_BrushSize" "  XXXXXXXXXXX  ,"
	adds game "Holodeck_BrushSize" "   XXXXXXXXX   ,"
	adds game "Holodeck_BrushSize" "     XXXXX     ,"

	call 4000 4012 0

endm


*CLEAR BUTTON
scrp 1 1 64736 2001

lock

*target and animate button (pre-action)
	part 2001
	pose 1

*SCRIPT 12 (EAT) ON THE MAIN PIXELGRID IS USED TO CLEAR CURRENT FRAME
	mesg writ game "Holodeck_PixelGrid" 12

*target and animate button (post-action)
	wait 2
	part 2001
	pose 0

endm



*CLEAR ALL BUTTON
scrp 1 1 64736 2011

lock

*target and animate button (pre-action)
	part 2011
	pose 1


	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target main canvas and set pose 0
		enum 1 1 64742
			part va01
			pose 0
		next

*target ALL frames and set pose 0
		enum 1 1 64743
			part va01
			pose 0
		next

	repe


*target and animate button (post-action)
	wait 2
	part 2011
	pose 0

endm



*COPY BUTTON (WIP)
scrp 1 1 64736 2002

lock

*target and animate button (pre-action)
	part 2002
	pose 1

*SCRIPT 1 (ACTIVATE 1) (event number 0) ON THE MAIN PIXELGRID IS USED TO COPY PIXELGRID TO THE CLIPBOARD
	mesg writ game "Holodeck_PixelGrid" 0

*target and animate button (post-action)
	wait 2
	part 2002
	pose 0

endm



*CUT BUTTON (WIP)
scrp 1 1 64736 2003

lock

*target and animate button (pre-action)
	part 2003
	pose 1


*SCRIPT 1 (ACTIVATE 1) (event number 0) ON THE MAIN PIXELGRID IS USED TO COPY PIXELGRID TO THE CLIPBOARD
	mesg writ game "Holodeck_PixelGrid" 0

*SCRIPT 12 (EAT) ON THE MAIN PIXELGRID IS USED TO CLEAR CURRENT FRAME
	mesg writ game "Holodeck_PixelGrid" 12

*target and animate button (post-action)
	wait 2
	part 2003
	pose 0

endm



*PASTE BUTTON
scrp 1 1 64736 2004

lock

*target and animate button (pre-action)
	part 2004
	pose 1


	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target clipboard and store pose for each pixel
		targ game "Holodeck_AnimFrame_Clipboard"
		part va01
		setv va03 pose

*target main canvas and apply stored pose for each pixel
		targ game "Holodeck_PixelGrid"
		part va01
		pose va03

*target main canvas and apply stored pose for each pixel
		targ game "Holodeck_AnimFrame_Selected"
		part va01
		pose va03


	repe


	targ ownr

*target and animate button (post-action)
	wait 2
	part 2004
	pose 0

endm



*FLIP X BUTTON (WIP)
scrp 1 1 64736 2005

lock

*target and animate button (pre-action)
	part 2005
	pose 1


	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target main canvas and set pose
		enum 1 1 64742
			part va01
			pose 0
		next

		enum 1 1 64743
			part va01
			pose 0
		next

	repe


*target and animate button (post-action)
	wait 2
	part 2005
	pose 0

endm



*FLIP Y BUTTON (WIP)
scrp 1 1 64736 2006

lock

*target and animate button (pre-action)
	part 2006
	pose 1


	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target main canvas and set pose
		enum 1 1 64742
			part va01
			pose 0
		next

		enum 1 1 64743
			part va01
			pose 0
		next

	repe


*target and animate button (post-action)
	wait 6
	part 2006
	pose 0

endm



*ROTATE 90 CLOCKWISE BUTTON (WIP)
scrp 1 1 64736 2007

lock

*target and animate button (pre-action)
	part 2007
	pose 1


	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target main canvas and set pose
		enum 1 1 64742
			part va01
			pose 0
		next

		enum 1 1 64743
			part va01
			pose 0
		next

	repe


*target and animate button (post-action)
	wait 6
	part 2007
	pose 0

endm



*ROTATE 90 COUNTER-CLOCKWISE BUTTON (WIP)
scrp 1 1 64736 2008

lock

*target and animate button (pre-action)
	part 2008
	pose 1


	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target main canvas and set pose
		enum 1 1 64742
			part va01
			pose 0
		next

		enum 1 1 64743
			part va01
			pose 0
		next

	repe


*target and animate button (post-action)
	wait 2
	part 2008
	pose 0

endm



**ROTATE 180 DEGREES BUTTON (OLD BROKEN WIP) (might be useful for implementing symmetry)
*scrp 1 1 64736 2009
*
**target and animate button (pre-action)
*	part 2009
*	pose 1
*
*
*	inst
*
**pixel grid is 18x18
*	setv va00 game "Holodeck_NumPixelsX"
*	mulv va00 game "Holodeck_NumPixelsY"
*
*
*	setv va01 0
*	setv va02 va00
*	addv va02 1
*
*	reps va00
*
*		addv va01 1
*		subv va02 1
*
**target main canvas and set pose
*		targ game "Holodeck_PixelGrid"
*		part va01
*		setv va03 pose
*		part va02
*		setv va04 pose
*
**		part va01
**		pose va03
*		part va02
*		pose va03
*
*	repe
*
*	targ ownr
*
**target and animate button (post-action)
*	wait 2
*	part 2009
*	pose 0
*
*endm


*ROTATE 180 DEGREES BUTTON (WIP)
scrp 1 1 64736 2009

lock

*target and animate button (pre-action)
	part 2009
	pose 1


	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

*this number will run down from the max loops instead of up from 0.
*this means it will be the opposite pixel, effectively rotating the image 180 degrees.
	setv va02 va00
	addv va02 1

	reps va00

		addv va01 1
		subv va02 1

*target main canvas and store pose for each pixel
		targ game "Holodeck_PixelGrid"
		part va01
		setv va03 pose

*target Transformation Buffer and apply stored pose for each pixel
		targ game "Holodeck_Buffer"
		part va02
		pose va03

	repe


*RUN THE WHOLE LOOP AGAIN BUT WITH SWAPPED TARGETS (BUFFER > PIXELGRID) AND WITHOUT REVERSING THE PIXEL ORDER

	setv va01 0

	reps va00

		addv va01 1

*target main canvas and store pose for each pixel
		targ game "Holodeck_Buffer"
		part va01
		setv va03 pose

*target Transformation Buffer and apply stored pose for each pixel
		targ game "Holodeck_PixelGrid"
		part va01
		pose va03

	repe






*SCRIPT 2 (ACTIVATE 2) (event number 1) ON THE MAIN PIXELGRID IS USED TO COPY PIXELGRID TO THE SELECTED FRAME
*(not working and making me think it will be good to move all the commands from the other .cos (holodeck_pixelgrid_partially_refactored) into this one.)
*	mesg writ game "Holodeck_PixelGrid" 1


*	wait 1

*	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target main canvas and store pose for each pixel
		targ game "Holodeck_PixelGrid"
		part va01
		setv va03 pose

*target stored canvas and apply stored pose for each pixel
		targ game "Holodeck_AnimFrame_Selected"
		part va01
		pose va03



	repe


	targ ownr

*target and animate button (post-action)
	wait 2
	part 2009
	pose 0

endm


*INVERT COLOURS BUTTON (WIP)
scrp 1 1 64736 2010

lock

*target and animate button (pre-action)
	part 2010
	pose 1


	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target main canvas and set pose
		enum 1 1 64742
			part va01


*for each pixel...

*count a number up from one, and count another down to zero from the max amount of colours.

*starting at 1 skips the transparent colour.
			setv va03 1
*			setv va04 255

*16 and not 17 or Black > White flip doesn't make sense

			setv va04 16

*set va05 to 1 when a pixel is already inverted. otherwise it will try to invert itself again and the colour won't appear to change.
			setv va05 0

*			reps 255
			reps 16

*if at any point the palette index of the pixel matches the iteration of the loop we're on
				doif pose = va03 and va05 = 0
*then set the palette index of the pixel to the opposing loop we're on (so 254 would become 1, 0 would become 255, etc)
					pose va04
*and mark the pixel as already inverted.
					setv va05 1
				endi

				addv va03 1
				subv va04 1

			repe

		next

*		enum 1 1 64743
*			part va01
*			pose 0
*		next

	repe

*	inst


*SCRIPT 2 (ACTIVATE 2) (event number 1) ON THE MAIN PIXELGRID IS USED TO COPY PIXELGRID TO THE SELECTED FRAME
*(not working and making me think it will be good to move all the commands from the other .cos (holodeck_pixelgrid_partially_refactored) into this one.)
*	mesg writ game "Holodeck_PixelGrid" 1


*	wait 1

*	inst

*pixel grid is 18x18
	setv va00 game "Holodeck_NumPixelsX"
	mulv va00 game "Holodeck_NumPixelsY"


	setv va01 0

	reps va00

		addv va01 1

*target main canvas and store pose for each pixel
		targ game "Holodeck_PixelGrid"
		part va01
		setv va03 pose

*target stored canvas and apply stored pose for each pixel
		targ game "Holodeck_AnimFrame_Selected"
		part va01
		pose va03



	repe


	targ ownr



*target and animate button (post-action)
	wait 2
	part 2010
	pose 0

endm




*SAVE BUTTON (WIP)
scrp 1 1 64736 5001

lock

*target and animate button (pre-action)
	part 5001
	pose 1


	inst

*setup fake header for now
	sets va69 "<name>"
	adds va69 "\n"
	adds va69 "Super Bouncy Ball"
	adds va69 "\n"
	adds va69 "</name>"
	adds va69 "\n"
	adds va69 "\n"
	adds va69 "<description>"
	adds va69 "\n"
	adds va69 "This rubber ball is very bouncy! It should keep your creatures happy for a while, although chasing after it can be tiring."
	adds va69 "\n"
	adds va69 "</description>"
	adds va69 "\n"
	adds va69 "\n"
	adds va69 "<frames>"
	adds va69 "\n"


*newline char
	sets va99 "\n"


*init width string
	sets va97 "width:"

*store current width
	adds va97 vtos game "Holodeck_NumPixelsX"

*init height string
	sets va98 "height:"

*store current height
	adds va98 vtos game "Holodeck_NumPixelsY"

*init image string
	sets va02 "frame0:"

	seta va55 game "Holodeck_AnimFrame_0"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame1:"

	seta va55 game "Holodeck_AnimFrame_1"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame2:"

	seta va55 game "Holodeck_AnimFrame_2"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame3:"

	seta va55 game "Holodeck_AnimFrame_3"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame4:"

	seta va55 game "Holodeck_AnimFrame_4"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame5:"

	seta va55 game "Holodeck_AnimFrame_5"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame6:"

	seta va55 game "Holodeck_AnimFrame_6"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame7:"

	seta va55 game "Holodeck_AnimFrame_7"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame8:"

	seta va55 game "Holodeck_AnimFrame_8"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"
	adds va02 "frame9:"

	seta va55 game "Holodeck_AnimFrame_9"
	gsub write_pixels_from_agent(PixelGrid)_va55_to_string_va56

	adds va02 va56
	adds va02 "\n"



	targ ownr



	file oope 1 "testSprite.holoimage" 0

*add temporary fake header
	outs va69

	outs va97
	outs va99
	outs va98
	outs va99
	outs va02
	outs "\n"
	outs "</frames>"
	file oclo



*target and animate button (post-action)
	wait 2
	part 5001
	pose 0






	subr write_pixels_from_agent(PixelGrid)_va55_to_string_va56

		wait 1

		inst

*init string
		sets va56 ""


*pixel grid is 18x18
		setv va00 game "Holodeck_NumPixelsX"
		mulv va00 game "Holodeck_NumPixelsY"



		setv va01 0

		reps va00

			addv va01 1

*target main canvas and store pose for each pixel
			targ va55
			part va01
			setv va03 pose

*add the stored pose for each pixel to the string we're gonna write.
			adds va56 vtos va03
			adds va56 ","
		repe




*cut off the last character (a comma)
		setv va04 strl va56
		subv va04 1

*todo: CURRENTLY NOT CUTTING OFF THE LAST CHAR AS A TEMP FIX TO THE LAST PIXEL BEING CORRUPTED
*		sets va56 subs va56 1 va04

*		targ ownr

	retn



endm








*LOAD BUTTON (WIP)
scrp 1 1 64736 5002

lock

*target and animate button (pre-action)
	part 5002
	pose 1


	inst


*hide all frames before slowly loading in their properties
	enum 1 1 64743
		show 0
	next



	file iope 1 "testSprite.holoimage"




	loop
		sets va00 innl
		sets va00 lowa va00


	untl va00 = "<name>"

*init Name string
	sets va01 ""

	loop
		sets va00 innl

		sets va02 lowa va00

		doif sins va02 1 "</name>" = -1
			adds va01 va00
		endi

	untl va02 = "</name>"






	loop
		sets va00 innl
		sets va00 lowa va00


	untl va00 = "<description>"

*init Description string
	sets va01 ""

	loop
		sets va00 innl

		sets va02 lowa va00

		doif sins va02 1 "</description>" = -1
			adds va01 va00
		endi

	untl va02 = "</description>"







	loop
		sets va00 innl
		sets va00 lowa va00


	untl va00 = "<frames>"

*load in all the frames, 0-9
	sets va35 "frame0:"
	gsub load_value_from_key_named_va35_into_string_va30

*(also load frame 0 into the pixelgrid)
	seta va34 game "Holodeck_PixelGrid"
	gsub load_string_of_poses_va30_into_compound_agent_va34


*todo: may also have to set Selected Frame to 0 here

	seta va34 game "Holodeck_AnimFrame_0"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame1:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_1"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame2:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_2"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame3:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_3"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame4:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_4"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame5:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_5"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame6:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_6"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame7:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_7"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame8:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_8"
	gsub load_string_of_poses_va30_into_compound_agent_va34

	sets va35 "frame9:"
	gsub load_value_from_key_named_va35_into_string_va30

	seta va34 game "Holodeck_AnimFrame_9"
	gsub load_string_of_poses_va30_into_compound_agent_va34







*init Name string
	sets va01 ""

	loop
		sets va00 innl

		sets va02 lowa va00

		doif sins va02 1 "</frames>" = -1
			adds va01 va00
		endi

	untl va02 = "</frames>"








	file iclo

*	targ norn
*	sezz va99




	inst

*unhide all frames now you're done loading
	enum 1 1 64743
		show 1
	next






	targ ownr

*target and animate button (post-action)
	wait 2
	part 5002
	pose 0








	subr load_string_of_poses_va30_into_compound_agent_va34

*todo: if any key you're trying to load from doesn't exist, throw a general error that stops the loading process

		wait 1
		inst

*target the compound object (pixelgrid)
		targ va34

		sets va31 ","
		gsub set_va32_to_number_of_substrings_in_string_va30_delimited_by_string_va31
		setv name "counting" 0

*the value returned by the subroutine is off by 1 (323 instead of 324)
*NOTE: currently not true. attempting to fix this by not cutting off the bracket at the end of the string... for now
*		addv va32 1

		setv name "max_count" va32

*		inst

		loop
*			wait 1
*			inst
			addv name "counting" 1


*todo: somewhere around here you could put the fix for the last pixel not reading properly from the string unless the string ends with a , comma ,

			setv va32 name "counting"
			gsub set_va33_to_string_at_index_va32_from_string_va30_with_delimiter_va31

*			doif va33 = ""
*				sets va33 "error loading byte "
*				adds va33 vtos va32
*				dbg: outs va33
*			endi

*			doif va34 = game "Holodeck_AnimFrame_7"
*				dbg: outs va33
*			endi

*convert pixel colour ID string to number
			setv va05 stoi va33

*select part number corresponding with the pixel number we're reading...

*todo: for some reason the top left (1st) and bottom right (Last) pixel are being cut off
			part name "counting"
			doif base <> -1
				pose va05
			endi

		untl name "max_count" eq name "counting"

	retn






	subr load_value_from_key_named_va35_into_string_va30

*init frame0: string
		sets va01 ""

		loop
			sets va00 innl

			sets va02 lowa va00

			doif sins va02 1 va35 = -1
				adds va01 va00
			endi

		untl sins va02 1 va35 <> -1


*	setv va03 strl va02
*	subv va03 sins va02 1 "frame0: "

*	sets va99 subs va02 sins va02 1 "frame0: " va03


*read from position 7 (length of string "frame0:") (VA03) to the END OF STRING. calculated by subtracting VA03 from the length of the current string (VA02).
		setv va03 strl va35
*this way off by 1 and we were reading the first pixel with as ":10" instead of "10"
		addv va03 1
		setv va04 strl va02
		subv va04 va03
*  	      vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
		sets va30 subs va02 va03 va04
*  	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	retn







*subroutines "borrowed" from C2toDS-Refresh (https://github.com/Creatures-Developer-Network/C2toDS-Refresh)
*thanks Amaikokonut!


	subr set_va32_to_number_of_substrings_in_string_va30_delimited_by_string_va31

		wait 1

		inst

*in string va30, where the splitting character is va31, va32 is the number of
*words/items in said string.
		setv va32 0
		setv va39 1
		loop
*if the first character is the delimiter, skip it 
			doif sins va30 va39 va31 ne -1
				doif subs va30 1 1 eq va31 and va39 eq 1
					addv va39 1
				endi
				setv va38 sins va30 va39 va31
				subv va38 va39
				sets va37 subs va30 va39 va38
			else
				sets va37 subs va30 va39 -1
				setv va39 -99
			endi
			doif va37 ne ""
*             vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
				addv va32 1
*             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			endi
			addv va39 va38
			addv va39 1
		untl va39 lt 1
	retn



	subr set_va33_to_string_at_index_va32_from_string_va30_with_delimiter_va31
*in string va30, where the splitting charater is va31 and va32 is the index 
* (indicies start at 1) of the thing you want, va33 is the item, or "" if it
* doesn't exist
		setv va39 1
		setv va36 0
		sets va33 ""
		loop
*if the first character is the delimiter, skip it 
			doif sins va30 va39 va31 ne -1
				doif subs va30 1 1 eq va31 and va39 eq 1
					addv va39 1
				endi
				setv va38 sins va30 va39 va31
				subv va38 va39
				sets va37 subs va30 va39 va38
			else
				sets va37 subs va30 va39 -1
				setv va39 -999999
			endi
			doif va37 ne ""
				addv va36 1
				doif va36 eq va32
*                     vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
					sets va33 va37
*                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
					setv va39 -999999
				endi
			endi
			addv va39 va38
			addv va39 1
		untl va39 lt 1
	retn



endm