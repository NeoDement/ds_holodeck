
*get canvas bounds and store them in va00, va01, va02 and va03

	inst

	setv va00 posl
	setv va01 post

	setv va02 va00
	setv va03 va01

*grab the Number Of Pixels on each axis and multiply it by how big a pixel is to get the canvas width/height

	setv va06 game "Holodeck_NumPixelsX"
	mulv va06 game "Holodeck_PixelSize"

	setv va07 game "Holodeck_NumPixelsY"
	mulv va07 game "Holodeck_PixelSize"

	addv va02 va06
	addv va03 va07
*	addv va02 144
*	addv va03 144


	targ pntr

	setv va04 posl
	setv va05 post

	targ ownr

	inst


*if the mouse cursor is inside the pixel grid bounds
	doif va04 > va00 and va04 < va02 and va05 > va01 and va05 < va03

		targ pntr

*VA98 - X AXIS POS
		setv va98 posl
*VA99 - Y AXIS POS
		setv va99 post

*subtract the position of the canvas itself from the pointer position
*(this leaves us with values starting at 0 instead of 99452 or whatever)
		subv va98 va00
		subv va99 va01

*divide by Holodeck_PixelSize (a pixel is X pixels wide and tall)
		divv va98 game "Holodeck_PixelSize"
		divv va99 game "Holodeck_PixelSize"

*round to the nearest int (problem: cant control if it rounds up or down)
*		setv va98 ftoi va98
*		setv va99 ftoi va99

*round them DOWN to the nearest int. by cutting off everything after the decimal point.		
		sets va98 vtos va98
		sets va99 vtos va99


*find the decimal point
		setv va50 sins va98 1 "."
		setv va51 sins va99 1 "."

		subv va50 1
		subv va51 1

*cut off everything else
		sets va98 subs va98 1 va50
		sets va99 subs va99 1 va51

*convert the strings back to integers
		setv va98 stoi va98
		setv va99 stoi va99


*if either of the values exceed their bounds, clamp them to the max
*this is because the pointer x/y values update a bit too late when you drag it or something.


*subtract 1 from the number of pixels on both axes first (because of the 0th row/column)
		setv va50 game "Holodeck_NumPixelsX"
		subv va50 1

		setv va51 game "Holodeck_NumPixelsY"
		subv va51 1


		doif va98 > va50
			setv va98 va50
		endi

		doif va99 > va51
			setv va99 va51
		endi
*end of clamp operation


*add 1 to every value so we start at 1 instead of 0 and break some calculations.
*		addv va98 1
*		addv va99 1


* 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18

* 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36


*multiply va99 (Y coordinate in tiny pixels) by the number of X (horizontal) pixels

*		mulv va99 18
		mulv va99 game "Holodeck_NumPixelsX"



		addv va98 va99

*add 1 to the final value so we're base 1 instead of base 0
		addv va98 1


* 001 002 003 004 005 006 007 008 009 010 011 012 013 014 015 016 017 018

* 018 036 054 072 090 108 126 144 162 180 198 216 234 252 270 288 306 324

*mulv va98 va99

*this makes the current norn say which grid pixel ID we are hovering over.

*		targ norn

*		sezz vtos va98

		targ ownr

		doif ov00 = 1
			part va98

* OV01 STORES THE PEN COLOUR!		

*		pose 11


*temporarily? adding 1 to ov01 to line up with the new c16 file
			setv va50 ov01
			addv va50 1

			pose va50

			rtar 1 1 64743
			part va98
			pose va50

		endi

*		reps 18
*			reps 18


*			repe
*		repe

endi